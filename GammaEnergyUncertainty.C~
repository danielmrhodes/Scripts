double Eg_Cont(double en) {

  double sig = 1.2127 + en*0.000275177;
  return TMath::Power(sig/en,2.0);
  
}

double Th_Cont(double beta, double theta, double dT) {

  double num = beta*TMath::Sin(theta);
  double denom = 1.0 - beta*TMath::Cos(theta);

  return TMath::Power(dT*num/denom,2.0);
  
}

double Bt_Cont(double beta, double dB, double theta) {

  double num = TMath::Cos(theta) - beta;
  double denom = (1.0 - beta*beta)*(1.0 - beta*TMath::Cos(theta));

  return TMath::Power(dB*num/denom,2.0);
}

void Unc( ) {

  const double Eg = 659.15;
  const double dTheta = 3.5*TMath::DegToRad();

  const double beta = 0.076;
  const double dBeta = 0.004;

  const int num = 180;
  TGraph* gE = new TGraph(num);
  TGraph* gT = new TGraph(num);
  TGraph* gB = new TGraph(num);
  TGraph* gS = new TGraph(num);

  const double r2d = TMath::RadToDeg();
  for(int i=0;i<num;i++) {

    double theta = (i+1)*TMath::DegToRad();

    double en_cont = Eg_Cont(Eg);
    double th_cont = Th_Cont(beta,theta,dTheta);
    double bt_cont = Bt_Cont(beta,dBeta,theta);

    double sum = en_cont + th_cont + bt_cont;

    gE->SetPoint(i,r2d*theta,TMath::Sqrt(en_cont));
    gT->SetPoint(i,r2d*theta,TMath::Sqrt(th_cont));
    gB->SetPoint(i,r2d*theta,TMath::Sqrt(bt_cont));
    gS->SetPoint(i,r2d*theta,TMath::Sqrt(sum));
    
  }

  gB->SetTitle("");
  //gB->GetXaxis()->SetTitle("#theta (deg)");
  //gB->GetYaxis()->SetTitle("#sigma_{E}/E");
  
  gB->SetLineColor(kRed);
  gB->SetLineWidth(10);

  gT->SetLineColor(kGreen);
  gT->SetLineWidth(10);

  gE->SetLineColor(kBlue);
  gE->SetLineWidth(10);

  gS->SetLineColor(kBlack);
  gS->SetLineWidth(10);

  new TCanvas();
  gB->Draw("AL");
  gT->Draw("sameL");
  gE->Draw("sameL");
  gS->Draw("sameL");

  gB->GetXaxis()->SetRangeUser(0.0,180.0);
  gB->GetYaxis()->SetRangeUser(0.0,0.007);

  TLegend* leg = new TLegend(0.7,0.7,0.9,0.9);
  leg->AddEntry(gS,"Total","L");
  leg->AddEntry(gT,"#theta Contribution","L");
  leg->AddEntry(gB,"#beta Contribution","L");
  leg->AddEntry(gE,"E_{intr} Contribution","L");
  leg->Draw();

  return;
}
